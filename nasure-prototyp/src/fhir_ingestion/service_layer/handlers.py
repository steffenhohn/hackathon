"""Simplified handlers for FHIR ingestion service."""

import logging

from fhir_ingestion.domain.commands import StoreFHIRBundle
from fhir_ingestion.domain.events import BundleStored
from fhir_ingestion.domain.model import FhirBundle
from fhir_ingestion.service_layer.unit_of_work import FHIRIngestionUnitOfWork
from fhir_ingestion.adapters import redis_adapter

logger = logging.getLogger(__name__)


def store_fhir_bundle(command: StoreFHIRBundle, uow: FHIRIngestionUnitOfWork) -> str:
    """Store FHIR bundle using domain entity - events generated by domain model."""
    with uow:
        logger.info(f"Storing FHIR bundle {command.bundle_id}")

        # Create domain entity
        bundle = FhirBundle(
            bundle_id=command.bundle_id,
            bundle_data=command.bundle_data,
            source_system=command.source_system
        )

        # Store via repository - this triggers domain events
        object_key = uow.bundles.add(bundle)

        logger.info(f"FHIR bundle {command.bundle_id} stored at {object_key}")

        uow.commit()

    return object_key


def bundle_stored(event: BundleStored, uow: FHIRIngestionUnitOfWork):
    """Handle the fact that a bundle was stored - internal processing."""
    logger.info(f"Bundle {event.bundle_id} was stored at {event.object_key}")
    # Future: metrics, audit logging, internal workflows, etc.


def publish_stored_event(event: BundleStored, uow: FHIRIngestionUnitOfWork):
    """Publish BundleStored event to external systems."""
    logger.info(f"publish_stored_event called for bundle {event.bundle_id}")
    try:
        # Publish using simple Redis adapter - follows Cosmic Python pattern
        redis_adapter.publish("surveillance:bundles", event)
        logger.info(f"Published stored event for {event.bundle_id}")

    except Exception as e:
        logger.error(f"Failed to publish stored event for {event.bundle_id}: {e}")
        # Don't re-raise - external failures shouldn't break the flow


       